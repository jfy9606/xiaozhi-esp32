/*!
 * Minimal Bootstrap Bundle JS (custom build for ESP32 web server)
 * Contains only essential functionality to reduce file size
 */
(function(){
  'use strict';
  
  // Global bootstrap object
  window.bootstrap = {};
  
  // Modal class
  class Modal {
    constructor(element) {
      this.element = element;
      this.isShown = false;
      this.backdrop = null;
      this.focusElement = null;
      this._initEvents();
    }
    
    static getInstance(element) {
      if (!element) return null;
      return Modal.instances.get(element) || new Modal(element);
    }
    
    _initEvents() {
      // Find close buttons
      const closeButtons = this.element.querySelectorAll('[data-bs-dismiss="modal"]');
      for (const btn of closeButtons) {
        btn.addEventListener('click', () => this.hide());
      }
    }
    
    _createBackdrop() {
      this.backdrop = document.createElement('div');
      this.backdrop.className = 'modal-backdrop fade show';
      document.body.appendChild(this.backdrop);
      this.backdrop.addEventListener('click', () => this.hide());
    }
    
    _removeBackdrop() {
      if (this.backdrop) {
        document.body.removeChild(this.backdrop);
        this.backdrop = null;
      }
    }
    
    show() {
      if (this.isShown) return;
      
      this.isShown = true;
      this._createBackdrop();
      
      // Store currently focused element
      this.focusElement = document.activeElement;
      
      // Show modal
      this.element.style.display = 'block';
      this.element.classList.add('show');
      document.body.classList.add('modal-open');
      
      // Focus the modal or first input
      const focusInput = this.element.querySelector('input, button');
      if (focusInput) focusInput.focus();
      
      // Trigger event
      const event = new Event('shown.bs.modal');
      this.element.dispatchEvent(event);
    }
    
    hide() {
      if (!this.isShown) return;
      
      this.isShown = false;
      this._removeBackdrop();
      
      // Hide modal
      this.element.classList.remove('show');
      setTimeout(() => {
        this.element.style.display = 'none';
        document.body.classList.remove('modal-open');
        
        // Return focus to previous element
        if (this.focusElement) this.focusElement.focus();
        
        // Trigger event
        const event = new Event('hidden.bs.modal');
        this.element.dispatchEvent(event);
      }, 300);
    }
    
    toggle() {
      if (this.isShown) {
        this.hide();
      } else {
        this.show();
      }
    }
  }
  
  // Instance storage
  Modal.instances = new Map();
  
  // Alert class
  class Alert {
    constructor(element) {
      this.element = element;
      this._initEvents();
    }
    
    static getInstance(element) {
      if (!element) return null;
      return Alert.instances.get(element) || new Alert(element);
    }
    
    _initEvents() {
      const closeButton = this.element.querySelector('[data-bs-dismiss="alert"]');
      if (closeButton) {
        closeButton.addEventListener('click', () => this.close());
      }
    }
    
    close() {
      const event = new Event('close.bs.alert');
      this.element.dispatchEvent(event);
      
      this.element.classList.add('fade-out');
      
      setTimeout(() => {
        this.element.remove();
        const closedEvent = new Event('closed.bs.alert');
        document.dispatchEvent(closedEvent);
      }, 300);
    }
  }
  
  // Instance storage
  Alert.instances = new Map();
  
  // Tab class
  class Tab {
    constructor(element) {
      this.element = element;
      this._initEvents();
    }
    
    static getInstance(element) {
      if (!element) return null;
      return Tab.instances.get(element) || new Tab(element);
    }
    
    _initEvents() {
      this.element.addEventListener('click', (event) => {
        event.preventDefault();
        this.show();
      });
    }
    
    show() {
      // Don't do anything if already active
      if (this.element.classList.contains('active')) return;
      
      // Find the target tab content
      const target = document.querySelector(this.element.getAttribute('href'));
      if (!target) return;
      
      // Find parent UL
      const tabList = this.element.closest('[role="tablist"]');
      if (!tabList) return;
      
      // Deactivate all tabs
      const activeTabs = tabList.querySelectorAll('.active');
      for (const tab of activeTabs) {
        tab.classList.remove('active');
      }
      
      // Hide all tab contents
      const tabParent = target.parentElement;
      const tabPanes = tabParent.querySelectorAll('.tab-pane');
      for (const pane of tabPanes) {
        pane.classList.remove('show', 'active');
      }
      
      // Activate this tab and show its content
      this.element.classList.add('active');
      target.classList.add('show', 'active');
      
      // Trigger event
      const event = new Event('shown.bs.tab');
      this.element.dispatchEvent(event);
    }
  }
  
  // Instance storage
  Tab.instances = new Map();
  
  // Initialize components
  const initializeComponents = () => {
    // Initialize modals
    document.querySelectorAll('[data-bs-toggle="modal"]').forEach(trigger => {
      const target = document.querySelector(trigger.getAttribute('data-bs-target'));
      if (target) {
        const modal = Modal.getInstance(target) || new Modal(target);
        Modal.instances.set(target, modal);
        
        trigger.addEventListener('click', (event) => {
          event.preventDefault();
          modal.toggle();
        });
      }
    });
    
    // Initialize alerts
    document.querySelectorAll('.alert').forEach(element => {
      const alert = Alert.getInstance(element) || new Alert(element);
      Alert.instances.set(element, alert);
    });
    
    // Initialize tabs
    document.querySelectorAll('[data-bs-toggle="tab"]').forEach(element => {
      const tab = Tab.getInstance(element) || new Tab(element);
      Tab.instances.set(element, tab);
    });
  };
  
  // Export components to global bootstrap namespace
  window.bootstrap = {
    Modal: {
      getInstance: (element) => Modal.getInstance(element)
    },
    Alert: {
      getInstance: (element) => Alert.getInstance(element)
    },
    Tab: {
      getInstance: (element) => Tab.getInstance(element)
    }
  };
  
  // Initialize on DOM content loaded
  document.addEventListener('DOMContentLoaded', initializeComponents);
})(); 